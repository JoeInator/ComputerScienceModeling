// The generated lexer module will start with this code
{
module CalculatorLexer
open FSharp.Text.Lexing
open System
// open the module that defines the tokens
open CalculatorParser
}

// We define macros for some regular expressions we will use later
let digit       = ['0'-'9']
let num         = digit+ ( '.' digit+)?  ('E' ('+'|'-')? digit+ )?
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let primBoolValue = "true" | "false"

// We define now the rules for recognising and building tokens
// for each of the tokens of our language we need a rule
// NOTE: rules are applied in order top-down.
//       This is important when tokens overlap (not in this example)
rule tokenize = parse
// deal with tokens that need to be ignored (skip them)
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
// deal with tokens that need to be built
| num           { NUM(Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| "sqrt"        { SQRT } //NEW
| "cube"        { CUBE } //NEW
| "log"         { LOG } //NEW
| "logten"      { LOG10 } //NEW
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR } 
| '['           { LSQBR }
| ']'           { RSQBR }
| "skip"        { SKIP }
| primBoolValue { PRIMBOOLEAN (LexBuffer<_>.LexemeString lexbuf) }
| ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9''_']*      { ID (LexBuffer<_>.LexemeString lexbuf) }
// booleans
| '|'           { BoolLogicOr }
| '&'           { BoolLogicAnd }
| "||"          { LogicOr }
| "&&"          { LogicAnd }
| '!'           { NOT }
| '='           { EQUALS }
| "!="          { NOTEQUALS }
| '>'           { LargerThan }
| '<'           { SmallerThan }
| ">="          { LargerThanOrEquals }
| "<="          { SmallerThanOrEquals }
// commands
| ":="          { ASSIGNVARIABLE }
| "do "         { LDO }
| " od"         { RDO }
| "if "         { LIF }
| " fi"         { RIF }
| ";"           { SEQUENCING }
// guarded commands
| "->"          { CONDITION }
| "[]"          { ELSE }
// end of file
| eof           { EOF }
