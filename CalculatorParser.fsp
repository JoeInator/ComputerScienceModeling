// Open the file that defines the type "expr" we shall use as AST
%{
open CalculatorTypesAST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token <string> ID PRIMBOOLEAN
%token TIMES DIV PLUS MINUS POW SQRT CUBE LOG LOG10 LPAR RPAR LSQBR RSQBR EOF 
%token BoolLogicOr BoolLogicAnd LogicOr LogicAnd NOT EQUALS NOTEQUALS LargerThan SmallerThan LargerThanOrEquals SmallerThanOrEquals CONDITION 
%token ASSIGNVARIABLE LDO RDO LIF RIF SEQUENCING ELSE SKIP
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
//%left PLUS MINUS
//%left TIMES DIV
//%right POW
%right ELSE SEQUENCING
%left BoolLogicOr LogicOr
%left BoolLogicAnd LogicAnd
%nonassoc NOT



// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <commands> start
%type <expr> expression0
%type <expr> expression1
%type <expr> expression2
%type <expr> expression3
%type <boolExpr> boolExpression0
%type <commands> commandExpression
%type <guardedCommands> guardedCommandExpression


// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression0
// here written:
start: commandExpression EOF             { $1 }


// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:
//The number succeeding the word "expression" represents it's precedence priority - the higher the better
expression0:
  | expression0 PLUS expression1    { PlusExpr($1,$3)  }
  | expression0 MINUS expression1   { MinusExpr($1,$3) }
  | expression1                     { $1               }

expression1:
  | expression1 TIMES expression2   { TimesExpr($1,$3) }
  | expression1 DIV expression2     { DivExpr($1,$3)   }
  | expression2                     { $1               }

expression2:
  | expression3 POW expression2     { PowExpr($1,$3)   }
  | SQRT expression2                { SqrtExpr($2)     } //NEW
  | CUBE expression2                { CubeExpr($2)     } //NEW
  | LOG expression2                 { LogExpr($2)      } //NEW
  | LOG10 expression2               { Log10Expr($2)    } //NEW
  | expression3                     { $1               }

expression3:
  | PLUS expression3                { UPlusExpr($2)    }
  | MINUS expression3               { UMinusExpr($2)   }
  | NUM                             { Num($1)          }
  | ID                              { Variable($1)     }
  | ID LSQBR expression0 RSQBR      { ArrayValue($1,$3)  }
  | LPAR expression0 RPAR           { $2               }

boolExpression0:
  | boolExpression0 BoolLogicOr boolExpression0     { BoolLogicOrExpr($1,$3)          }
  | boolExpression0 BoolLogicAnd boolExpression0    { BoolLogicAndExpr($1,$3)         }
  | boolExpression0 LogicOr boolExpression0         { LogicOrExpr($1,$3)              }
  | boolExpression0 LogicAnd boolExpression0        { LogicAndExpr($1,$3)             }
  | NOT boolExpression0                             { NOTExpr($2)                     }
  | LPAR boolExpression0 RPAR                       { $2                              }
  // simple bools
  | expression0 EQUALS expression0                  { EqualsExpr($1, $3)              }
  | expression0 NOTEQUALS expression0               { NotEqualsExpr($1,$3)            }
  | expression0 LargerThan expression0              { LargerThanExpr($1,$3)           }
  | expression0 LargerThanOrEquals expression0      { LargerThanOrEqualsExpr($1,$3)   }
  | expression0 SmallerThan expression0             { SmallerThanExpr($1,$3)          }
  | expression0 SmallerThanOrEquals expression0     { SmallerThanOrEqualsExpr($1,$3)  }
  | PRIMBOOLEAN                                     { TrueOrFalse($1)                 }

commandExpression:
  | ID ASSIGNVARIABLE expression0                   { AssignVariableCommand($1,$3)    }
  | ID LSQBR expression0 RSQBR ASSIGNVARIABLE expression0 { AssignArrayValue($1,$3,$6)   }
  | SKIP                                            { SkipOperation                   }
  | LDO guardedCommandExpression RDO                { ExecuteLoop($2)                 }
  | LIF guardedCommandExpression RIF                { ExecuteIf($2)                   }
  | commandExpression SEQUENCING commandExpression  { CommandSequence($1,$3)          }

guardedCommandExpression:
  | boolExpression0 CONDITION commandExpression            { ExecuteCondition($1,$3)  }
  | guardedCommandExpression ELSE guardedCommandExpression { ExecuteChoice($1,$3)     }

// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
