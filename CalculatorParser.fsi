// Signature file for parser generated by fsyacc
module CalculatorParser
type token = 
  | ASSIGNVARIABLE
  | LDO
  | RDO
  | LIF
  | RIF
  | SEQUENCING
  | ELSE
  | SKIP
  | BoolLogicOr
  | BoolLogicAnd
  | LogicOr
  | LogicAnd
  | NOT
  | EQUALS
  | NOTEQUALS
  | LargerThan
  | SmallerThan
  | LargerThanOrEquals
  | SmallerThanOrEquals
  | CONDITION
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | SQRT
  | CUBE
  | LOG
  | LOG10
  | LPAR
  | RPAR
  | LSQBR
  | RSQBR
  | EOF
  | ID of (string)
  | PRIMBOOLEAN of (string)
  | NUM of (float)
type tokenId = 
    | TOKEN_ASSIGNVARIABLE
    | TOKEN_LDO
    | TOKEN_RDO
    | TOKEN_LIF
    | TOKEN_RIF
    | TOKEN_SEQUENCING
    | TOKEN_ELSE
    | TOKEN_SKIP
    | TOKEN_BoolLogicOr
    | TOKEN_BoolLogicAnd
    | TOKEN_LogicOr
    | TOKEN_LogicAnd
    | TOKEN_NOT
    | TOKEN_EQUALS
    | TOKEN_NOTEQUALS
    | TOKEN_LargerThan
    | TOKEN_SmallerThan
    | TOKEN_LargerThanOrEquals
    | TOKEN_SmallerThanOrEquals
    | TOKEN_CONDITION
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_SQRT
    | TOKEN_CUBE
    | TOKEN_LOG
    | TOKEN_LOG10
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LSQBR
    | TOKEN_RSQBR
    | TOKEN_EOF
    | TOKEN_ID
    | TOKEN_PRIMBOOLEAN
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression0
    | NONTERM_expression1
    | NONTERM_expression2
    | NONTERM_expression3
    | NONTERM_boolExpression0
    | NONTERM_commandExpression
    | NONTERM_guardedCommandExpression
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (commands) 
