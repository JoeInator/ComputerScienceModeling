// Implementation file for parser generated by fsyacc
module CalculatorParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "CalculatorParser.fsp"

open CalculatorTypesAST

# 10 "CalculatorParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | ASSIGNVARIABLE
  | LDO
  | RDO
  | LIF
  | RIF
  | SEQUENCING
  | ELSE
  | SKIP
  | PRIMITIVEBOOLEAN
  | BoolLogicOr
  | BoolLogicAnd
  | LogicOr
  | LogicAnd
  | NOT
  | EQUALS
  | NOTEQUALS
  | LargerThan
  | SmallerThan
  | LargerThanOrEquals
  | SmallerThanOrEquals
  | CONDITION
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | SQRT
  | CUBE
  | LOG
  | LOG10
  | LPAR
  | RPAR
  | LSQBR
  | RSQBR
  | EOF
  | ID of (string)
  | NUM of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_ASSIGNVARIABLE
    | TOKEN_LDO
    | TOKEN_RDO
    | TOKEN_LIF
    | TOKEN_RIF
    | TOKEN_SEQUENCING
    | TOKEN_ELSE
    | TOKEN_SKIP
    | TOKEN_PRIMITIVEBOOLEAN
    | TOKEN_BoolLogicOr
    | TOKEN_BoolLogicAnd
    | TOKEN_LogicOr
    | TOKEN_LogicAnd
    | TOKEN_NOT
    | TOKEN_EQUALS
    | TOKEN_NOTEQUALS
    | TOKEN_LargerThan
    | TOKEN_SmallerThan
    | TOKEN_LargerThanOrEquals
    | TOKEN_SmallerThanOrEquals
    | TOKEN_CONDITION
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_SQRT
    | TOKEN_CUBE
    | TOKEN_LOG
    | TOKEN_LOG10
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LSQBR
    | TOKEN_RSQBR
    | TOKEN_EOF
    | TOKEN_ID
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression0
    | NONTERM_expression1
    | NONTERM_expression2
    | NONTERM_expression3
    | NONTERM_boolExpression0
    | NONTERM_commandExpression
    | NONTERM_guardedCommandExpression

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | ASSIGNVARIABLE  -> 0 
  | LDO  -> 1 
  | RDO  -> 2 
  | LIF  -> 3 
  | RIF  -> 4 
  | SEQUENCING  -> 5 
  | ELSE  -> 6 
  | SKIP  -> 7 
  | PRIMITIVEBOOLEAN  -> 8 
  | BoolLogicOr  -> 9 
  | BoolLogicAnd  -> 10 
  | LogicOr  -> 11 
  | LogicAnd  -> 12 
  | NOT  -> 13 
  | EQUALS  -> 14 
  | NOTEQUALS  -> 15 
  | LargerThan  -> 16 
  | SmallerThan  -> 17 
  | LargerThanOrEquals  -> 18 
  | SmallerThanOrEquals  -> 19 
  | CONDITION  -> 20 
  | TIMES  -> 21 
  | DIV  -> 22 
  | PLUS  -> 23 
  | MINUS  -> 24 
  | POW  -> 25 
  | SQRT  -> 26 
  | CUBE  -> 27 
  | LOG  -> 28 
  | LOG10  -> 29 
  | LPAR  -> 30 
  | RPAR  -> 31 
  | LSQBR  -> 32 
  | RSQBR  -> 33 
  | EOF  -> 34 
  | ID _ -> 35 
  | NUM _ -> 36 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_ASSIGNVARIABLE 
  | 1 -> TOKEN_LDO 
  | 2 -> TOKEN_RDO 
  | 3 -> TOKEN_LIF 
  | 4 -> TOKEN_RIF 
  | 5 -> TOKEN_SEQUENCING 
  | 6 -> TOKEN_ELSE 
  | 7 -> TOKEN_SKIP 
  | 8 -> TOKEN_PRIMITIVEBOOLEAN 
  | 9 -> TOKEN_BoolLogicOr 
  | 10 -> TOKEN_BoolLogicAnd 
  | 11 -> TOKEN_LogicOr 
  | 12 -> TOKEN_LogicAnd 
  | 13 -> TOKEN_NOT 
  | 14 -> TOKEN_EQUALS 
  | 15 -> TOKEN_NOTEQUALS 
  | 16 -> TOKEN_LargerThan 
  | 17 -> TOKEN_SmallerThan 
  | 18 -> TOKEN_LargerThanOrEquals 
  | 19 -> TOKEN_SmallerThanOrEquals 
  | 20 -> TOKEN_CONDITION 
  | 21 -> TOKEN_TIMES 
  | 22 -> TOKEN_DIV 
  | 23 -> TOKEN_PLUS 
  | 24 -> TOKEN_MINUS 
  | 25 -> TOKEN_POW 
  | 26 -> TOKEN_SQRT 
  | 27 -> TOKEN_CUBE 
  | 28 -> TOKEN_LOG 
  | 29 -> TOKEN_LOG10 
  | 30 -> TOKEN_LPAR 
  | 31 -> TOKEN_RPAR 
  | 32 -> TOKEN_LSQBR 
  | 33 -> TOKEN_RSQBR 
  | 34 -> TOKEN_EOF 
  | 35 -> TOKEN_ID 
  | 36 -> TOKEN_NUM 
  | 39 -> TOKEN_end_of_input
  | 37 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression0 
    | 3 -> NONTERM_expression0 
    | 4 -> NONTERM_expression0 
    | 5 -> NONTERM_expression1 
    | 6 -> NONTERM_expression1 
    | 7 -> NONTERM_expression1 
    | 8 -> NONTERM_expression2 
    | 9 -> NONTERM_expression2 
    | 10 -> NONTERM_expression2 
    | 11 -> NONTERM_expression2 
    | 12 -> NONTERM_expression2 
    | 13 -> NONTERM_expression2 
    | 14 -> NONTERM_expression3 
    | 15 -> NONTERM_expression3 
    | 16 -> NONTERM_expression3 
    | 17 -> NONTERM_expression3 
    | 18 -> NONTERM_expression3 
    | 19 -> NONTERM_expression3 
    | 20 -> NONTERM_boolExpression0 
    | 21 -> NONTERM_boolExpression0 
    | 22 -> NONTERM_boolExpression0 
    | 23 -> NONTERM_boolExpression0 
    | 24 -> NONTERM_boolExpression0 
    | 25 -> NONTERM_boolExpression0 
    | 26 -> NONTERM_boolExpression0 
    | 27 -> NONTERM_boolExpression0 
    | 28 -> NONTERM_boolExpression0 
    | 29 -> NONTERM_boolExpression0 
    | 30 -> NONTERM_boolExpression0 
    | 31 -> NONTERM_boolExpression0 
    | 32 -> NONTERM_commandExpression 
    | 33 -> NONTERM_commandExpression 
    | 34 -> NONTERM_commandExpression 
    | 35 -> NONTERM_commandExpression 
    | 36 -> NONTERM_commandExpression 
    | 37 -> NONTERM_commandExpression 
    | 38 -> NONTERM_guardedCommandExpression 
    | 39 -> NONTERM_guardedCommandExpression 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 39 
let _fsyacc_tagOfErrorTerminal = 37

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | ASSIGNVARIABLE  -> "ASSIGNVARIABLE" 
  | LDO  -> "LDO" 
  | RDO  -> "RDO" 
  | LIF  -> "LIF" 
  | RIF  -> "RIF" 
  | SEQUENCING  -> "SEQUENCING" 
  | ELSE  -> "ELSE" 
  | SKIP  -> "SKIP" 
  | PRIMITIVEBOOLEAN  -> "PRIMITIVEBOOLEAN" 
  | BoolLogicOr  -> "BoolLogicOr" 
  | BoolLogicAnd  -> "BoolLogicAnd" 
  | LogicOr  -> "LogicOr" 
  | LogicAnd  -> "LogicAnd" 
  | NOT  -> "NOT" 
  | EQUALS  -> "EQUALS" 
  | NOTEQUALS  -> "NOTEQUALS" 
  | LargerThan  -> "LargerThan" 
  | SmallerThan  -> "SmallerThan" 
  | LargerThanOrEquals  -> "LargerThanOrEquals" 
  | SmallerThanOrEquals  -> "SmallerThanOrEquals" 
  | CONDITION  -> "CONDITION" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | SQRT  -> "SQRT" 
  | CUBE  -> "CUBE" 
  | LOG  -> "LOG" 
  | LOG10  -> "LOG10" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LSQBR  -> "LSQBR" 
  | RSQBR  -> "RSQBR" 
  | EOF  -> "EOF" 
  | ID _ -> "ID" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | ASSIGNVARIABLE  -> (null : System.Object) 
  | LDO  -> (null : System.Object) 
  | RDO  -> (null : System.Object) 
  | LIF  -> (null : System.Object) 
  | RIF  -> (null : System.Object) 
  | SEQUENCING  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | PRIMITIVEBOOLEAN  -> (null : System.Object) 
  | BoolLogicOr  -> (null : System.Object) 
  | BoolLogicAnd  -> (null : System.Object) 
  | LogicOr  -> (null : System.Object) 
  | LogicAnd  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | NOTEQUALS  -> (null : System.Object) 
  | LargerThan  -> (null : System.Object) 
  | SmallerThan  -> (null : System.Object) 
  | LargerThanOrEquals  -> (null : System.Object) 
  | SmallerThanOrEquals  -> (null : System.Object) 
  | CONDITION  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | SQRT  -> (null : System.Object) 
  | CUBE  -> (null : System.Object) 
  | LOG  -> (null : System.Object) 
  | LOG10  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LSQBR  -> (null : System.Object) 
  | RSQBR  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 20us; 65535us; 44us; 4us; 46us; 5us; 47us; 6us; 56us; 7us; 57us; 7us; 58us; 7us; 59us; 7us; 60us; 7us; 62us; 8us; 63us; 9us; 64us; 10us; 65us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 72us; 16us; 74us; 7us; 77us; 7us; 85us; 7us; 22us; 65535us; 17us; 18us; 19us; 20us; 44us; 21us; 46us; 21us; 47us; 21us; 56us; 21us; 57us; 21us; 58us; 21us; 59us; 21us; 60us; 21us; 62us; 21us; 63us; 21us; 64us; 21us; 65us; 21us; 66us; 21us; 67us; 21us; 69us; 21us; 70us; 21us; 72us; 21us; 74us; 21us; 77us; 21us; 85us; 21us; 29us; 65535us; 17us; 26us; 19us; 26us; 22us; 23us; 24us; 25us; 28us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 44us; 26us; 46us; 26us; 47us; 26us; 56us; 26us; 57us; 26us; 58us; 26us; 59us; 26us; 60us; 26us; 62us; 26us; 63us; 26us; 64us; 26us; 65us; 26us; 66us; 26us; 67us; 26us; 69us; 26us; 70us; 26us; 72us; 26us; 74us; 26us; 77us; 26us; 85us; 26us; 31us; 65535us; 17us; 27us; 19us; 27us; 22us; 27us; 24us; 27us; 28us; 27us; 30us; 27us; 32us; 27us; 34us; 27us; 36us; 27us; 38us; 39us; 40us; 41us; 44us; 27us; 46us; 27us; 47us; 27us; 56us; 27us; 57us; 27us; 58us; 27us; 59us; 27us; 60us; 27us; 62us; 27us; 63us; 27us; 64us; 27us; 65us; 27us; 66us; 27us; 67us; 27us; 69us; 27us; 70us; 27us; 72us; 27us; 74us; 27us; 77us; 27us; 85us; 27us; 9us; 65535us; 47us; 54us; 56us; 49us; 57us; 50us; 58us; 51us; 59us; 52us; 60us; 53us; 74us; 55us; 77us; 55us; 85us; 55us; 3us; 65535us; 0us; 2us; 82us; 80us; 83us; 81us; 3us; 65535us; 74us; 75us; 77us; 78us; 85us; 84us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 24us; 47us; 77us; 109us; 119us; 123us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 37us; 1us; 1us; 3us; 2us; 3us; 18us; 3us; 2us; 3us; 19us; 9us; 2us; 3us; 19us; 26us; 27us; 28us; 29us; 30us; 31us; 8us; 2us; 3us; 26us; 27us; 28us; 29us; 30us; 31us; 3us; 2us; 3us; 26us; 3us; 2us; 3us; 27us; 3us; 2us; 3us; 28us; 3us; 2us; 3us; 29us; 3us; 2us; 3us; 30us; 3us; 2us; 3us; 31us; 3us; 2us; 3us; 32us; 3us; 2us; 3us; 33us; 3us; 2us; 3us; 33us; 1us; 2us; 3us; 2us; 5us; 6us; 1us; 3us; 3us; 3us; 5us; 6us; 3us; 4us; 5us; 6us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 2us; 8us; 13us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 2us; 17us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 2us; 19us; 25us; 1us; 19us; 5us; 20us; 20us; 21us; 22us; 23us; 5us; 20us; 21us; 21us; 22us; 23us; 5us; 20us; 21us; 22us; 22us; 23us; 5us; 20us; 21us; 22us; 23us; 23us; 5us; 20us; 21us; 22us; 23us; 24us; 5us; 20us; 21us; 22us; 23us; 25us; 5us; 20us; 21us; 22us; 23us; 38us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 2us; 32us; 33us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 35us; 2us; 35us; 39us; 1us; 35us; 1us; 36us; 2us; 36us; 39us; 1us; 36us; 2us; 37us; 37us; 2us; 37us; 38us; 1us; 37us; 1us; 38us; 2us; 39us; 39us; 1us; 39us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 13us; 17us; 27us; 36us; 40us; 44us; 48us; 52us; 56us; 60us; 64us; 68us; 72us; 74us; 78us; 80us; 84us; 88us; 90us; 92us; 94us; 96us; 98us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 134us; 136us; 138us; 140us; 143us; 145us; 151us; 157us; 163us; 169us; 175us; 181us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; 229us; 231us; 233us; 236us; 238us; 241us; 244us; 246us; 248us; 251us; |]
let _fsyacc_action_rows = 86
let _fsyacc_actionTableElements = [|4us; 32768us; 1us; 74us; 3us; 77us; 7us; 73us; 35us; 68us; 0us; 49152us; 2us; 32768us; 5us; 82us; 34us; 3us; 0us; 16385us; 3us; 32768us; 23us; 17us; 24us; 19us; 33us; 45us; 3us; 32768us; 23us; 17us; 24us; 19us; 31us; 48us; 9us; 32768us; 14us; 62us; 15us; 63us; 16us; 64us; 17us; 66us; 18us; 65us; 19us; 67us; 23us; 17us; 24us; 19us; 31us; 48us; 8us; 32768us; 14us; 62us; 15us; 63us; 16us; 64us; 17us; 66us; 18us; 65us; 19us; 67us; 23us; 17us; 24us; 19us; 2us; 16410us; 23us; 17us; 24us; 19us; 2us; 16411us; 23us; 17us; 24us; 19us; 2us; 16412us; 23us; 17us; 24us; 19us; 2us; 16413us; 23us; 17us; 24us; 19us; 2us; 16414us; 23us; 17us; 24us; 19us; 2us; 16415us; 23us; 17us; 24us; 19us; 2us; 16416us; 23us; 17us; 24us; 19us; 3us; 32768us; 23us; 17us; 24us; 19us; 33us; 71us; 2us; 16417us; 23us; 17us; 24us; 19us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 2us; 16386us; 21us; 22us; 22us; 24us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 2us; 16387us; 21us; 22us; 22us; 24us; 2us; 16388us; 21us; 22us; 22us; 24us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 0us; 16389us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 0us; 16390us; 0us; 16391us; 1us; 16397us; 25us; 28us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 0us; 16392us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 0us; 16393us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 0us; 16394us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 0us; 16395us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 0us; 16396us; 5us; 32768us; 23us; 38us; 24us; 40us; 30us; 46us; 35us; 43us; 36us; 42us; 0us; 16398us; 5us; 32768us; 23us; 38us; 24us; 40us; 30us; 46us; 35us; 43us; 36us; 42us; 0us; 16399us; 0us; 16400us; 1us; 16401us; 32us; 44us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 0us; 16402us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 10us; 32768us; 13us; 60us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 47us; 35us; 43us; 36us; 42us; 0us; 16403us; 2us; 16404us; 10us; 57us; 12us; 59us; 0us; 16405us; 2us; 16406us; 10us; 57us; 12us; 59us; 0us; 16407us; 0us; 16408us; 5us; 32768us; 9us; 56us; 10us; 57us; 11us; 58us; 12us; 59us; 31us; 61us; 5us; 32768us; 9us; 56us; 10us; 57us; 11us; 58us; 12us; 59us; 20us; 83us; 10us; 32768us; 13us; 60us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 47us; 35us; 43us; 36us; 42us; 10us; 32768us; 13us; 60us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 47us; 35us; 43us; 36us; 42us; 10us; 32768us; 13us; 60us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 47us; 35us; 43us; 36us; 42us; 10us; 32768us; 13us; 60us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 47us; 35us; 43us; 36us; 42us; 10us; 32768us; 13us; 60us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 47us; 35us; 43us; 36us; 42us; 0us; 16409us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 2us; 32768us; 0us; 69us; 32us; 70us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 1us; 32768us; 0us; 72us; 9us; 32768us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 46us; 35us; 43us; 36us; 42us; 0us; 16418us; 10us; 32768us; 13us; 60us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 47us; 35us; 43us; 36us; 42us; 2us; 32768us; 2us; 76us; 6us; 85us; 0us; 16419us; 10us; 32768us; 13us; 60us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 47us; 35us; 43us; 36us; 42us; 2us; 32768us; 4us; 79us; 6us; 85us; 0us; 16420us; 1us; 16421us; 5us; 82us; 1us; 16422us; 5us; 82us; 4us; 32768us; 1us; 74us; 3us; 77us; 7us; 73us; 35us; 68us; 4us; 32768us; 1us; 74us; 3us; 77us; 7us; 73us; 35us; 68us; 1us; 16423us; 6us; 85us; 10us; 32768us; 13us; 60us; 23us; 38us; 24us; 40us; 26us; 30us; 27us; 32us; 28us; 34us; 29us; 36us; 30us; 47us; 35us; 43us; 36us; 42us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 14us; 18us; 28us; 37us; 40us; 43us; 46us; 49us; 52us; 55us; 58us; 62us; 65us; 75us; 78us; 88us; 91us; 94us; 104us; 105us; 115us; 116us; 117us; 119us; 129us; 130us; 140us; 141us; 151us; 152us; 162us; 163us; 173us; 174us; 180us; 181us; 187us; 188us; 189us; 191us; 201us; 202us; 212us; 223us; 224us; 227us; 228us; 231us; 232us; 233us; 239us; 245us; 256us; 267us; 278us; 289us; 300us; 301us; 311us; 321us; 331us; 341us; 351us; 361us; 364us; 374us; 384us; 386us; 396us; 397us; 408us; 411us; 412us; 423us; 426us; 427us; 429us; 431us; 436us; 441us; 443us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 1us; 3us; 3us; 1us; 3us; 2us; 2us; 2us; 2us; 1us; 2us; 2us; 1us; 1us; 4us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 6us; 1us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 16390us; 16391us; 65535us; 65535us; 16392us; 65535us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 16396us; 65535us; 16398us; 65535us; 16399us; 16400us; 65535us; 65535us; 16402us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 16419us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 328 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : commands)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 337 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : commands)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "CalculatorParser.fsp"
                                                                _1 
                   )
# 47 "CalculatorParser.fsp"
                 : commands));
# 348 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CalculatorParser.fsp"
                                                           PlusExpr(_1,_3)  
                   )
# 59 "CalculatorParser.fsp"
                 : expr));
# 360 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "CalculatorParser.fsp"
                                                           MinusExpr(_1,_3) 
                   )
# 60 "CalculatorParser.fsp"
                 : expr));
# 372 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "CalculatorParser.fsp"
                                                           _1               
                   )
# 61 "CalculatorParser.fsp"
                 : expr));
# 383 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CalculatorParser.fsp"
                                                           TimesExpr(_1,_3) 
                   )
# 64 "CalculatorParser.fsp"
                 : expr));
# 395 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CalculatorParser.fsp"
                                                           DivExpr(_1,_3)   
                   )
# 65 "CalculatorParser.fsp"
                 : expr));
# 407 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "CalculatorParser.fsp"
                                                           _1               
                   )
# 66 "CalculatorParser.fsp"
                 : expr));
# 418 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CalculatorParser.fsp"
                                                           PowExpr(_1,_3)   
                   )
# 69 "CalculatorParser.fsp"
                 : expr));
# 430 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CalculatorParser.fsp"
                                                           SqrtExpr(_2)     
                   )
# 70 "CalculatorParser.fsp"
                 : expr));
# 441 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "CalculatorParser.fsp"
                                                           CubeExpr(_2)     
                   )
# 71 "CalculatorParser.fsp"
                 : expr));
# 452 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CalculatorParser.fsp"
                                                           LogExpr(_2)      
                   )
# 72 "CalculatorParser.fsp"
                 : expr));
# 463 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "CalculatorParser.fsp"
                                                           Log10Expr(_2)    
                   )
# 73 "CalculatorParser.fsp"
                 : expr));
# 474 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "CalculatorParser.fsp"
                                                           _1               
                   )
# 74 "CalculatorParser.fsp"
                 : expr));
# 485 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "CalculatorParser.fsp"
                                                           UPlusExpr(_2)    
                   )
# 77 "CalculatorParser.fsp"
                 : expr));
# 496 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "CalculatorParser.fsp"
                                                           UMinusExpr(_2)   
                   )
# 78 "CalculatorParser.fsp"
                 : expr));
# 507 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "CalculatorParser.fsp"
                                                           Num(_1)          
                   )
# 79 "CalculatorParser.fsp"
                 : expr));
# 518 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CalculatorParser.fsp"
                                                           Variable(_1)     
                   )
# 80 "CalculatorParser.fsp"
                 : expr));
# 529 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "CalculatorParser.fsp"
                                                           ArrayValue(_1,_3)  
                   )
# 81 "CalculatorParser.fsp"
                 : expr));
# 541 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CalculatorParser.fsp"
                                                           _2               
                   )
# 82 "CalculatorParser.fsp"
                 : expr));
# 552 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "CalculatorParser.fsp"
                                                                           BoolLogicOrExpr(_1,_3)          
                   )
# 85 "CalculatorParser.fsp"
                 : boolExpr));
# 564 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "CalculatorParser.fsp"
                                                                           BoolLogicAndExpr(_1,_3)         
                   )
# 86 "CalculatorParser.fsp"
                 : boolExpr));
# 576 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CalculatorParser.fsp"
                                                                           LogicOrExpr(_1,_3)              
                   )
# 87 "CalculatorParser.fsp"
                 : boolExpr));
# 588 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CalculatorParser.fsp"
                                                                           LogicAndExpr(_1,_3)             
                   )
# 88 "CalculatorParser.fsp"
                 : boolExpr));
# 600 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "CalculatorParser.fsp"
                                                                           NOTExpr(_2)                     
                   )
# 89 "CalculatorParser.fsp"
                 : boolExpr));
# 611 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "CalculatorParser.fsp"
                                                                           _2                              
                   )
# 90 "CalculatorParser.fsp"
                 : boolExpr));
# 622 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "CalculatorParser.fsp"
                                                                           EqualsExpr(_1, _3)              
                   )
# 92 "CalculatorParser.fsp"
                 : boolExpr));
# 634 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "CalculatorParser.fsp"
                                                                           NotEqualsExpr(_1,_3)            
                   )
# 93 "CalculatorParser.fsp"
                 : boolExpr));
# 646 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "CalculatorParser.fsp"
                                                                           LargerThanExpr(_1,_3)           
                   )
# 94 "CalculatorParser.fsp"
                 : boolExpr));
# 658 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "CalculatorParser.fsp"
                                                                           LargerThanOrEqualsExpr(_1,_3)   
                   )
# 95 "CalculatorParser.fsp"
                 : boolExpr));
# 670 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "CalculatorParser.fsp"
                                                                           SmallerThanExpr(_1,_3)          
                   )
# 96 "CalculatorParser.fsp"
                 : boolExpr));
# 682 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "CalculatorParser.fsp"
                                                                           SmallerThanOrEqualsExpr(_1,_3)  
                   )
# 97 "CalculatorParser.fsp"
                 : boolExpr));
# 694 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "CalculatorParser.fsp"
                                                                           AssignVariableCommand(_1,_3)    
                   )
# 101 "CalculatorParser.fsp"
                 : commands));
# 706 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "CalculatorParser.fsp"
                                                                                 AssignArrayValue(_1,_3,_6)   
                   )
# 102 "CalculatorParser.fsp"
                 : commands));
# 719 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "CalculatorParser.fsp"
                                                                           SkipOperation                   
                   )
# 103 "CalculatorParser.fsp"
                 : commands));
# 729 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : gaurdedCommands)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "CalculatorParser.fsp"
                                                                           ExecuteLoop(_2)                 
                   )
# 104 "CalculatorParser.fsp"
                 : commands));
# 740 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : gaurdedCommands)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "CalculatorParser.fsp"
                                                                           ExecuteIf(_2)                   
                   )
# 105 "CalculatorParser.fsp"
                 : commands));
# 751 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : commands)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : commands)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "CalculatorParser.fsp"
                                                                           CommandSequence(_1,_3)          
                   )
# 106 "CalculatorParser.fsp"
                 : commands));
# 763 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : boolExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : commands)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "CalculatorParser.fsp"
                                                                                  ExecuteCondition(_1,_3)  
                   )
# 109 "CalculatorParser.fsp"
                 : gaurdedCommands));
# 775 "CalculatorParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : gaurdedCommands)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : gaurdedCommands)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "CalculatorParser.fsp"
                                                                                  ExecuteChoice(_1,_3)     
                   )
# 110 "CalculatorParser.fsp"
                 : gaurdedCommands));
|]
# 788 "CalculatorParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 40;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : commands =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
